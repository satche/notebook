"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[5077],{9391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(4848),o=t(8453);const a={tags:["algorithm","algorithm/problem"]},r="Knapsack problem",s={id:"engineering/algorithms/problems/knapsack",title:"Knapsack problem",description:"The knapsack problem is a combinatorial optimization problem, used in resource allocation. It can concern for example: minimal waste in material cutting, selection of investements, cryoptgraphy, etc.",source:"@site/docs/engineering/algorithms/problems/knapsack.md",sourceDirName:"engineering/algorithms/problems",slug:"/engineering/algorithms/problems/knapsack",permalink:"/notebook/engineering/algorithms/problems/knapsack",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/problems/knapsack.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"algorithm/problem",permalink:"/notebook/tags/algorithm-problem"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{tags:["algorithm","algorithm/problem"]},sidebar:"engineeringSidebar",previous:{title:"Halting problem",permalink:"/notebook/engineering/algorithms/problems/halting"},next:{title:"P vs. NP problem",permalink:"/notebook/engineering/algorithms/problems/p-vs-np"}},l={},c=[{value:"Algorithm",id:"algorithm",level:2}];function m(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"knapsack-problem",children:"Knapsack problem"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://wikipedia.org/wiki/knapsack_problem",children:"knapsack problem"})," is a combinatorial optimization problem, used in resource allocation. It can concern for example: minimal waste in material cutting, selection of investements, cryoptgraphy, etc."]}),"\n",(0,i.jsx)(n.p,{children:"Picture someone who needs to feel a backpack with objects which has weight and values. The goal is to put as much valuable objects in the backpack without excessing the maximum capacity."}),"\n",(0,i.jsx)(n.h2,{id:"algorithm",children:"Algorithm"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[Greedy algorithm]: you can add object in the backpack according to its value, weight or value-weight ratio."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/notebook/engineering/algorithms/search/tabu-search",children:"Tabu search"}),": iterates the selection of objects by taking the most valuable one. When an object is added in the backpack, define a rule on how many iterations it should stay inside. Define a stopping criteria (e.g max. iterations)."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);