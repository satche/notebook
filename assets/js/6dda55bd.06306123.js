"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1640],{1390:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var s=a(4848),r=a(8453);const i={},l="Dart",t={id:"code/languages/dart",title:"Dart",description:"Values & Types",source:"@site/docs/code/languages/dart.md",sourceDirName:"code/languages",slug:"/code/languages/dart",permalink:"/notebook/code/languages/dart",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/code/languages/dart.md",tags:[],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{},sidebar:"codeSidebar",previous:{title:"CSS",permalink:"/notebook/code/languages/css"},next:{title:"Python",permalink:"/notebook/code/languages/python"}},d={},c=[{value:"Values &amp; Types",id:"values--types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"String",id:"string",level:3},{value:"Null",id:"null",level:3},{value:"Enum",id:"enum",level:3},{value:"Variables",id:"variables",level:2},{value:"Assign",id:"assign",level:3},{value:"Constants",id:"constants",level:3},{value:"final",id:"final",level:4},{value:"const",id:"const",level:4},{value:"late",id:"late",level:4},{value:"Functions",id:"functions",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Optional parameters",id:"optional-parameters",level:4},{value:"Default value",id:"default-value",level:4},{value:"Named parameters",id:"named-parameters",level:4},{value:"Required",id:"required",level:4},{value:"Operators",id:"operators",level:3},{value:"Cascades",id:"cascades",level:4},{value:"Lists &amp; Sets",id:"lists--sets",level:2},{value:"Add stuff",id:"add-stuff",level:3},{value:"Maps",id:"maps",level:2},{value:"Classes",id:"classes",level:2},{value:"Properties",id:"properties",level:3},{value:"static",id:"static",level:4},{value:"Methods",id:"methods",level:3},{value:"Getter &amp; setter",id:"getter--setter",level:4},{value:"Constructors",id:"constructors",level:4},{value:"Callable class",id:"callable-class",level:4},{value:"Implementation",id:"implementation",level:4},{value:"Errors handling",id:"errors-handling",level:2},{value:"Good to know",id:"good-to-know",level:2},{value:"Packages &amp; Modules",id:"packages--modules",level:2},{value:"Packages",id:"packages",level:3},{value:"Libraries",id:"libraries",level:3},{value:"Built-in library",id:"built-in-library",level:4},{value:"Custom library",id:"custom-library",level:4},{value:"Resources",id:"resources",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dart",children:"Dart"})}),"\n",(0,s.jsx)(n.h2,{id:"values--types",children:"Values & Types"}),"\n",(0,s.jsx)(n.p,{children:"Dart has type inference: it can detect and interpret type if not specified"}),"\n",(0,s.jsx)(n.h3,{id:"numbers",children:"Numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"int i = 1;\ndouble dbl = 1.0;\nnum nbr = 1; // works for int and double\n"})}),"\n",(0,s.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'String h = "hello";\nprint("$h world"); // "hello world"\n\nString multiline = """Hello\nworld""";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"null",children:"Null"}),"\n",(0,s.jsxs)(n.p,{children:["Dart don\u2019t like null values. Try to specify if you allow variables to be null ",(0,s.jsx)(n.code,{children:"?"})," or if you guarantee they can\u2019t be ",(0,s.jsx)(n.code,{children:"!"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'var a;           // return null if nothing is precised\nvar foo = bar!;  // bar is guaranteed to be never null\nint? age = null; // age can be an int or be null\n\n// Assign a value if is null\na ??= "value";\nvar b = a ?? "value";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"enum",children:"Enum"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"enum Drink { coffee, tea, soft }\nDrink espresso = Drink.coffee;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(n.h3,{id:"assign",children:"Assign"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"dynamic d = 1;  // can change type & value\nvar v = 1;      // can't change type, can change the value\nfinal f = 1;    // can't change type nor value (but can reassign)\nconst c = 1;    // can't change type nor value (immutable)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,s.jsx)(n.h4,{id:"final",children:"final"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"final list = [1,2,3];\nlist.add(4); // [1,2,3,4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Use it if the ",(0,s.jsx)(n.strong,{children:"value is not known at compile time"})," (database/api requests, runtime computed values like ",(0,s.jsx)(n.code,{children:"new DateTime.now()"}),", etc.)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'final name = "Alice";\nname = "Bob"; // Error: a final variable can only be set once.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When object are ",(0,s.jsx)(n.code,{children:"final"}),", you can modify items inside objects"]}),"\n",(0,s.jsx)(n.h4,{id:"const",children:"const"}),"\n",(0,s.jsx)(n.p,{children:"Use it when the value of the variable is known before runtime."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"const date = new DateTime.now();\n// Error: New expression is not a constant expression\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can use it to declare constant values. The value is immutable, not the variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"var list = const [1,2,3];\nlist.add(4); // Error: Unsupported operation\nlist = [1,2,3,4]; // [1,2,3,4];\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"final list = const [1,2,3];\nlist.add(4); // Error: Unsupported operation\nlist = [1,2,3,4]; // Error: Can't assign to the final variable 'list'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you\u2019re using ",(0,s.jsx)(n.code,{children:"const"})," inside a class, you have to use ",(0,s.jsx)(n.code,{children:"static"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'class Person {\n  static const name = "Alice";\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Unlike ",(0,s.jsx)(n.code,{children:"final"}),", ",(0,s.jsx)(n.code,{children:"const"})," is immutable: items inside objects can\u2019t be changed"]}),"\n",(0,s.jsx)(n.h4,{id:"late",children:"late"}),"\n",(0,s.jsxs)(n.p,{children:["In some cases, like top-level variables and instance variable, Dart can\u2019t determine if non-null value is set to a variable before it\u2019s used. You can use ",(0,s.jsx)(n.code,{children:"late"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"late int number;\n\nvoid main() {\n  number = 42;\n  print(number); // 42\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"It\u2019s also used to lazily initializing a variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"late String name = getName();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'void logHi() { print("hi"); };      // simple function without return\nString sayHi() { return "hi"; };    // specify return type\nnum addOne(nbr) { return 1 + nbr }; // with parameter\nnum addTwo(nbr) => 2 + nbr;         // arrow function (shorthand)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'String sayFullname(String firstname, String lastname) {\n  return "$firstname $lastname";\n}\n\nsayFullname("John", "Doe"); // John Doe\n'})}),"\n",(0,s.jsx)(n.h4,{id:"optional-parameters",children:"Optional parameters"}),"\n",(0,s.jsx)(n.p,{children:"You can make a parameter optional"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'String sayFullname(String firstname, [String? lastname]) {\n  if (lastname == null) return firstname;\n  return "$firstname $lastname";\n}\n\nsayFullname("Alice", "Cooper"); // John Doe\n'})}),"\n",(0,s.jsx)(n.h4,{id:"default-value",children:"Default value"}),"\n",(0,s.jsx)(n.p,{children:"You can specify a default value with optional parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'String sayName([String name = "John"]) => name;\nsayName(); // John\n'})}),"\n",(0,s.jsx)(n.h4,{id:"named-parameters",children:"Named parameters"}),"\n",(0,s.jsx)(n.p,{children:"Use named argument to help structures your data. They can be placed in any order."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'String assignNumber({\n  String firstname = "John",\n  String? lastname\n}) {\n  return "Hi, I\'m $firstname $lastname";\n};\n\nassignNumber(lastname: "Doe"); // Hi, I\'m John Doe\nassignNumber(); // Hello, my name is John null\n'})}),"\n",(0,s.jsx)(n.h4,{id:"required",children:"Required"}),"\n",(0,s.jsxs)(n.p,{children:["You can make named parameters mandatory with ",(0,s.jsx)(n.code,{children:"required"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"num addOne({required int number}) { return 1 + $number; };\naddOne(); // Error: Required named parameter 'number' must be provided.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,s.jsx)(n.h4,{id:"cascades",children:"Cascades"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"querySelector('#confirm')\n..text = 'Confirm\u2019\n..classes.add('important')\n..onClick.listen((e) => window.alert('Confirmed!'));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"lists--sets",children:"Lists & Sets"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/list-class",children:"Lists"})," are basically the same as array in other language.\n",(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/set-class",children:"Sets"})," are unordered collection of unique items.\nAlmost all methods apply for both concept."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"List<int> list = [1,2,3]; // list of int\nlist.length; // 3\nlist[1]; // 2\nlist = [...list, 4]; // [1,2,3,4]\n\nSet<int> set = {1,2,3}; // set of int\n"})}),"\n",(0,s.jsx)(n.h3,{id:"add-stuff",children:"Add stuff"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Spread operator\nvar list = [1,2,3];\nlist = [...list, 4]; // [1,2,3,4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/list/add",children:"add"})," / ",(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/list/addall",children:"addAll"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Appends items at the end of the list\nfinal list = [1,2];\nlist.add(3);        // [1,2,3]\nlist.addAll([4,5]); // [1,2,3,4,5]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/list/insert",children:"insert"})," / ",(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/dart-core/list/insertall",children:"insertAll"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Insert at specific index\nfinal list = [1,5];\nlist.insert(1,2);        // [1,2,5]\nlist.insertAll(2,[3,4]); // [1,2,3,4,5]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"maps",children:"Maps"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'var map = {\n\t"one": 1,\n\t"two": 2\n}\n\nprint(map["one"]); // 1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'class Person {\n\tfinal String name;          // instance variable\n\tfinal String _greet = "Hi"; // private variable\n\tPerson(this.name);          // constructor\n\tString greets() => "$_greet, my name is ${this.name}"; // method\n}\n\nvar client = Person("John");\nprint(client.name);     // John\nprint(client.greets()); // Hi, my name is John\n'})}),"\n",(0,s.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.p,{children:["Instance variables are class properties. They create implicit ",(0,s.jsx)(n.em,{children:"getter"})," and ",(0,s.jsx)(n.em,{children:"setter"})," methods, if they\u2019re not ",(0,s.jsx)(n.code,{children:"final"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class Person {\n  int? age;\n  final String name;\n  Person(this.name);\n}\n\nvar client = Person(\"Alice\");\nvar clientName = client.name; // getter for 'name'\nclient.age = 42;              // setter for 'age'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Instance variables can be ",(0,s.jsx)(n.code,{children:"final"}),", but you have to use ",(0,s.jsx)(n.code,{children:"static"})," with ",(0,s.jsx)(n.code,{children:"const"})]}),"\n",(0,s.jsx)(n.h4,{id:"static",children:"static"}),"\n",(0,s.jsxs)(n.p,{children:["Variables (and methods) can be static: they don\u2019t need to create an instance of the class to be used. It means it can\u2019t use ",(0,s.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'class Person {\n  static const name = "Alice";\n  static String greets() => "Hi!";\n}\n\nprint(Person.name);     // Alice\nprint(Person.greets()); // Hi!\n'})}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h4,{id:"getter--setter",children:"Getter & setter"}),"\n",(0,s.jsxs)(n.p,{children:["Getter & setter methods are created along with ",(0,s.jsx)(n.a,{href:"#properties",children:"properties"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(n.p,{children:"You can create a constructor by writing a method with the same name as the class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class Person {\n  final String firstname;\n  final String lastname;\n  \n  Person(this.firstname, this.lastname); // constructor\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can expends the initializer to do some operations before instance is created"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class Person {\n  final String firstname;\n  final String lastname;\n  final String fullname;\n  \n  Person(this.firstname, this.lastname) {\n    // \u2026\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'class Person {\n  final String firstname;\n  final String lastname;\n  final String fullname;\n  \n  Person(String firstname, String lastname) :\n  firstname = firstname,\n  lastname = lastname,\n  fullname = "$firstname $lastname";\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"callable-class",children:"Callable class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class Math { call(a,b) => a+b; }\n\nvar cal = Math();\nprint(cal(1,2)); // 3\n"})}),"\n",(0,s.jsx)(n.h4,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:'// ABSTRACT: Interface (can\'t be instantiated)\nabstract class Animal { void makeSound(); }\n\n// IMPLMENTS\nclass Dog implements Animal {\n  @override // annotate element overriding\n\tString makeSound() => "wuf";\n}\n\n// MIXIN: reuse variables and methods\nmixin Tamed {\n  String? name;\n\tString pet() => "You pet $name";\n}\n\n// EXTENDS class with mixins\nclass Pug extends Dog with Tamed {\n  Pug(name){this.name = name;}\n}\n\nvoid main() {  \n  var dog = Pug("Cookie");\n  print(dog.makeSound()); // wuf (from Dog class)\n  print(dog.pet());       // You pet Cookie (from Tamed mixin)\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"errors-handling",children:"Errors handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// BOOLEAN\nassert(2 < 1); // False: error raised (Assertion failed)\n\n// TRY CATCH\ntry {\n  someFunction();\n} on SpecificException catch (err) {\n  print(\"Specific error: $err\");\n} catch (err) {\n  print('Unkown error: $err');\n} finally {\n  backupFunction();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"good-to-know",children:"Good to know"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In Dart, everything that is placed in a variable is an object"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"packages--modules",children:"Packages & Modules"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter/material.dart'; // import package\nimport dart:core;                       // import built-in library\nimport '../path/lib.dart';              // import custom library\n\nimport 'lib' show foo;                  // import only foo\nimport 'lib' hide bar;                  // import all but bar\n"})}),"\n",(0,s.jsx)(n.h3,{id:"packages",children:"Packages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dart pub add  # add package (add line to pubspec.yaml)\ndart pub get  # get packages according to pubspec.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"libraries",children:"Libraries"}),"\n",(0,s.jsx)(n.h4,{id:"built-in-library",children:"Built-in library"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://dart.dev/guides/libraries/library-tour",children:"A tour of the core libraries"})," \u2013 Dart website"]}),"\n",(0,s.jsx)(n.h4,{id:"custom-library",children:"Custom library"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"External library \u2192 lib from external packages"}),"\n",(0,s.jsx)(n.li,{children:"Local library \u2192 lib defined inside the entrypoint package"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/dart-lang/sdk",children:"github.com/dart-lang/sdk"})," \u2013 Github repo"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dart.dev",children:"dart.dev"})," \u2013 Official website"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://pub.dev/",children:"pub.dev"})," \u2013 Package repo"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://devdocs.io/dart~2/",children:"devdocs.io/dart~2"})," \u2013 Devdoc page"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dartpad.dev/",children:"dartpad.dev"})," \u2013 Online editor"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>t});var s=a(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);