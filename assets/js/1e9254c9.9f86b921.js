"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[7739],{1327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(4848),i=n(8453);const a={tags:["data-structure","data-structure/tree"]},s="Tree",o={id:"engineering/data/data-structure/tree",title:"Tree",description:"A tree) is a hierarchical data structure close to a graph, with some constraints:",source:"@site/docs/engineering/data/data-structure/tree.md",sourceDirName:"engineering/data/data-structure",slug:"/engineering/data/data-structure/tree",permalink:"/notebook/engineering/data/data-structure/tree",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/data/data-structure/tree.md",tags:[{inline:!0,label:"data-structure",permalink:"/notebook/tags/data-structure"},{inline:!0,label:"data-structure/tree",permalink:"/notebook/tags/data-structure-tree"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{tags:["data-structure","data-structure/tree"]},sidebar:"engineeringSidebar",previous:{title:"Fibonacci Heap",permalink:"/notebook/engineering/data/data-structure/heap/fibonacci-heap"},next:{title:"NoSQL",permalink:"/notebook/engineering/data/database/nosql/"}},c={},d=[{value:"Types",id:"types",level:2},{value:"Binary tree",id:"binary-tree",level:3},{value:"Tree rotation",id:"tree-rotation",level:3},{value:"Spanning tree",id:"spanning-tree",level:3},{value:"Minimum Spanning Tree",id:"minimum-spanning-tree",level:4}];function h(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"tree",children:"Tree"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)",children:"tree"})," is a hierarchical data structure close to a ",(0,r.jsx)(t.a,{href:"/notebook/engineering/data/data-structure/graph",children:"graph"}),", with some constraints:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"It has a root node"}),"\n",(0,r.jsx)(t.li,{children:"Each node has only one parent (except for the root node)"}),"\n",(0,r.jsx)(t.li,{children:"It's acyclic (no loops)"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(t.h3,{id:"binary-tree",children:"Binary tree"}),"\n",(0,r.jsxs)(t.p,{children:["In a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Binary_tree",children:"binary tree"}),", each item within the tree has at most two children."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Example of a tree data structure",src:n(3788).A+"",width:"343",height:"273"})}),"\n",(0,r.jsx)(t.h3,{id:"tree-rotation",children:"Tree rotation"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.a,{href:"https://wikipedia.org/wiki/Tree_rotation",children:"tree rotation"})," changes the structure of the tree without interfering with the order of the elements."]}),"\n",(0,r.jsx)(t.h3,{id:"spanning-tree",children:"Spanning tree"}),"\n",(0,r.jsxs)(t.p,{children:["A graph can contains a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Spanning_tree",children:"spanning tree"}),", which connect all its vertices together, without create loops."]}),"\n",(0,r.jsx)(t.h4,{id:"minimum-spanning-tree",children:"Minimum Spanning Tree"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Minimum_spanning_tree",children:"Minimum Spanning Tree"})," (MST) is a spanning tree which connect vertices together by edges with minimum total weight."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Example of a Minimum Spanning Tree",src:n(4107).A+"",width:"592",height:"476"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},3788:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/binary-tree-163f2655169f4289d8a51f3c64655a9a.svg"},4107:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/minimum-spanning-tree-08268e0a941f18ddbc75ced5116fb0cd.png"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);