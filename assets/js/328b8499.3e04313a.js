"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[6824],{7196:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>t,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var r=n(4848),s=n(8453);const i={aliases:[],tags:["algorithm","algorithm/greedy","data-structure/graph"]},t="Kruskal's algorithm",l={id:"engineering/algorithms/graph/kruskal",title:"Kruskal's algorithm",description:"Kruskal's algorithm is a greedy algorithm that tries to find a Minimum Spanning Tree among a graph. To achieve this, he use a minimal spanning forest first and connect the trees together.",source:"@site/docs/engineering/algorithms/graph/kruskal.md",sourceDirName:"engineering/algorithms/graph",slug:"/engineering/algorithms/graph/kruskal",permalink:"/notebook/engineering/algorithms/graph/kruskal",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/graph/kruskal.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"algorithm/greedy",permalink:"/notebook/tags/algorithm-greedy"},{inline:!0,label:"data-structure/graph",permalink:"/notebook/tags/data-structure-graph"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:[],tags:["algorithm","algorithm/greedy","data-structure/graph"]},sidebar:"engineeringSidebar",previous:{title:"Hungarian algorithm",permalink:"/notebook/engineering/algorithms/graph/hungarian"},next:{title:"Nearest neighbour",permalink:"/notebook/engineering/algorithms/graph/nearest-neighbour"}},o={},h=[{value:"Algorithm",id:"algorithm",level:2},{value:"Complexity",id:"complexity",level:2},{value:"Resources",id:"resources",level:2}];function m(e){const a={a:"a",annotation:"annotation",h1:"h1",h2:"h2",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"kruskals-algorithm",children:"Kruskal's algorithm"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://wikipedia.org/wiki/kruskal%27s_algorithm",children:"Kruskal's algorithm"})," is a ",(0,r.jsx)(a.a,{href:"/notebook/engineering/algorithms/#Terminology",children:"greedy"})," algorithm that tries to find a ",(0,r.jsx)(a.a,{href:"/notebook/engineering/data/data-structure/tree#Minimum%20Spanning%20Tree",children:"Minimum Spanning Tree"})," among a ",(0,r.jsx)(a.a,{href:"/notebook/engineering/data/data-structure/graph",children:"graph"}),". To achieve this, he use a minimal spanning forest first and connect the trees together."]}),"\n",(0,r.jsx)(a.p,{children:"It works well for less dense graph."}),"\n",(0,r.jsxs)(a.p,{children:["![Animation of Kruskal's algorithm](../assets/kruskal.gif '",(0,r.jsx)(a.a,{href:"https://wikipedia.org/wiki/kruskal%27s_algorithm",children:"Kruskal's algorithm"})," - Wikipedia')"]}),"\n",(0,r.jsxs)(a.p,{children:["Its behaviour is similar to ",(0,r.jsx)(a.a,{href:"/notebook/engineering/algorithms/graph/prim",children:"Prim's algorithm"}),", but it uses multiple trees before connecting them together."]}),"\n",(0,r.jsx)(a.h2,{id:"algorithm",children:"Algorithm"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Create a forest (a set of trees) initially consisting of a separate single-vertex tree for each vertex in the input graph."}),"\n",(0,r.jsx)(a.li,{children:"Sort the graph edges by weight."}),"\n",(0,r.jsxs)(a.li,{children:["Loop through the edges of the graph, in ascending sorted order by their weight. For each edge:","\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Test whether adding the edge to the current forest would create a cycle"}),"\n",(0,r.jsx)(a.li,{children:"If not, add the edge to the forest, combining two trees into a single tree"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"complexity",children:"Complexity"}),"\n",(0,r.jsxs)(a.p,{children:["Kruskal algorithm has a ",(0,r.jsx)(a.a,{href:"/notebook/engineering/algorithms/complexity",children:"time complexity"})," of ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{mathvariant:"normal",children:"\u2223"}),(0,r.jsx)(a.mi,{children:"E"}),(0,r.jsx)(a.mi,{mathvariant:"normal",children:"\u2223"}),(0,r.jsx)(a.mi,{children:"log"}),(0,r.jsx)(a.mo,{children:"\u2061"}),(0,r.jsx)(a.mi,{mathvariant:"normal",children:"\u2223"}),(0,r.jsx)(a.mi,{children:"V"}),(0,r.jsx)(a.mi,{mathvariant:"normal",children:"\u2223"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(|E| \\log |V|)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord",children:"\u2223"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,r.jsx)(a.span,{className:"mord",children:"\u2223"}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsxs)(a.span,{className:"mop",children:["lo",(0,r.jsx)(a.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(a.span,{className:"mord",children:"\u2223"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,r.jsx)(a.span,{className:"mord",children:"\u2223"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"https://www.cs.usfca.edu/~galles/visualization/Kruskal.html",children:"Kruskal's algorithm visualization"})," - David Galles"]}),"\n"]})]})}function g(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>l});var r=n(6540);const s={},i=r.createContext(s);function t(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);