"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[4860],{7986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(4848),i=t(8453);const r={aliases:[],tags:[]},a="Lehman's laws",o={id:"engineering/architecture/principles/lehman's-laws",title:"Lehman's laws",description:"Lehman's laws are rule of thumb that apply to software evolution.",source:"@site/docs/engineering/architecture/principles/lehman's-laws.md",sourceDirName:"engineering/architecture/principles",slug:"/engineering/architecture/principles/lehman's-laws",permalink:"/notebook/engineering/architecture/principles/lehman's-laws",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/architecture/principles/lehman's-laws.md",tags:[],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:[],tags:[]},sidebar:"engineeringSidebar",previous:{title:"KISS",permalink:"/notebook/engineering/architecture/principles/kiss"},next:{title:"Separation of concerns",permalink:"/notebook/engineering/architecture/principles/separation-of-concerns"}},l={},c=[];function h(e){const n={a:"a",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"lehmans-laws",children:"Lehman's laws"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://wikipedia.org/wiki/lehman%27s_laws_of_software_evolution",children:"Lehman's laws"})," are rule of thumb that apply to software evolution."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Continuing Change"}),": a system must be continually adapted or it becomes progressively less satisfactory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increasing Complexity"}),": as a system evolves, its complexity increases unless work is done to maintain or reduce it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Self Regulation"}),": the more a system evolve, the less stakeholders can decide of its future."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Conservation of Organisational Stability"}),": operational/management teams don't have influence on how fast a system evolve."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Conservation of Familiarity"}),": releases' value of a system stay statistically the same (even if you increase operations)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Continuing Growth"}),": the functional content of a system must be continually increased to maintain user satisfaction over its lifetime."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Declining Quality"}),": the quality of a system will appear to be declining unless it is rigorously maintained and adapted to operational environment changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feedback System"}),": processes to evolve a system are complex and shouldn't be force to changes"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);