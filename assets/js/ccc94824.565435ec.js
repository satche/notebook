"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8795],{9677:e=>{e.exports=JSON.parse('{"tag":{"label":"algorithm/greedy","permalink":"/notebook/tags/algorithm-greedy","allTagsPath":"/notebook/tags","count":5,"items":[{"id":"engineering/algorithms/graph/dijkstra","title":"Dijkstra\'s algorithm","description":"Dijkstra\'s algorithm is a greedy algorithm that can be used to find, in a graph, the shortest path from a chosen vertices among all the other vertices.","permalink":"/notebook/engineering/algorithms/graph/dijkstra"},{"id":"engineering/algorithms/graph/ford-fulkerson","title":"Ford-Fulkerson algorithm","description":"Ford-Fulkerson algorithm is a greedy algorithm to find a maximum flow among a graph.","permalink":"/notebook/engineering/algorithms/graph/ford-fulkerson"},{"id":"engineering/algorithms/graph/kruskal","title":"Kruskal\'s algorithm","description":"Kruskal\'s algorithm is a greedy algorithm that tries to find a Minimum Spanning Tree among a graph. To achieve this, he use a minimal spanning forest first and connect the trees together.","permalink":"/notebook/engineering/algorithms/graph/kruskal"},{"id":"engineering/algorithms/graph/nearest-neighbour","title":"Nearest neighbour","description":"Nearest neighbour is a greedy algorithm initially to find the shortest path among a graph. It is typically used to solve problems like Traveling Salesman.","permalink":"/notebook/engineering/algorithms/graph/nearest-neighbour"},{"id":"engineering/algorithms/graph/prim","title":"Prim\'s algorithm","description":"Prim\'s algorithm is a greedy algorithm used to find the Minimum Spanning Tree in a graph.","permalink":"/notebook/engineering/algorithms/graph/prim"}],"unlisted":false}}')}}]);