"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[3951],{7227:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>h});var n=r(4848),o=r(8453);const s={tags:["algorithm","data-structure/graph","algorithm/problem"]},a="Shortest path problem",i={id:"engineering/algorithms/problems/shortest-path",title:"Shortest path problem",description:"The shortest path problem try to find a path in a graph cover the less distance. For that, the weights of the chosen edges should be as small as possible.",source:"@site/docs/engineering/algorithms/problems/shortest-path.md",sourceDirName:"engineering/algorithms/problems",slug:"/engineering/algorithms/problems/shortest-path",permalink:"/notebook/engineering/algorithms/problems/shortest-path",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/problems/shortest-path.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"data-structure/graph",permalink:"/notebook/tags/data-structure-graph"},{inline:!0,label:"algorithm/problem",permalink:"/notebook/tags/algorithm-problem"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{tags:["algorithm","data-structure/graph","algorithm/problem"]},sidebar:"engineeringSidebar",previous:{title:"Scheduling problems",permalink:"/notebook/engineering/algorithms/problems/scheduling"},next:{title:"Steiner tree problem",permalink:"/notebook/engineering/algorithms/problems/steiner-tree"}},l={},h=[{value:"Algorithms",id:"algorithms",level:2}];function g(e){const t={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"shortest-path-problem",children:"Shortest path problem"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Shortest_path_problem",children:"shortest path problem"})," try to find a path in a ",(0,n.jsx)(t.a,{href:"/notebook/engineering/data/database/nosql/graph",children:"graph"})," cover the less distance. For that, the weights of the chosen edges should be as small as possible."]}),"\n",(0,n.jsxs)(t.p,{children:["If you need to pass by all the vertices, it becomes a ",(0,n.jsx)(t.a,{href:"/notebook/engineering/algorithms/problems/traveling-salesman",children:"Traveling Salesman problem"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"algorithms",children:"Algorithms"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"A* search algorithm use heuristics to try to speed up the search."}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/notebook/engineering/algorithms/graph/bellman-ford",children:"Bellman-Ford"})," algorithm can find a path even with negative edges."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/notebook/engineering/algorithms/graph/dijkstra",children:"Dijkstra algorithm"})," finds a single path, but the edges should have non-negative weights."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/notebook/engineering/algorithms/graph/floyd-warshall",children:"Floyd-Warshall"})," algorithm solves all pairs shortest paths."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(6540);const o={},s=n.createContext(o);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);