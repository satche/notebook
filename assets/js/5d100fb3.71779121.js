"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2936],{3147:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var t=n(4848),i=n(8453);const a={tags:["algorithm","algorithm/sort"]},r="Heapsort",o={id:"engineering/algorithms/sort/heapsort",title:"Heapsort",description:"The heapsort is a sorting algorithm using max-heap data structure. It basically works like this:",source:"@site/docs/engineering/algorithms/sort/heapsort.md",sourceDirName:"engineering/algorithms/sort",slug:"/engineering/algorithms/sort/heapsort",permalink:"/notebook/engineering/algorithms/sort/heapsort",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/sort/heapsort.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"algorithm/sort",permalink:"/notebook/tags/algorithm-sort"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{tags:["algorithm","algorithm/sort"]},sidebar:"engineeringSidebar",previous:{title:"Counting sort",permalink:"/notebook/engineering/algorithms/sort/counting"},next:{title:"Quicksort",permalink:"/notebook/engineering/algorithms/sort/quicksort"}},l={},h=[{value:"Complexity",id:"complexity",level:2},{value:"Resources",id:"resources",level:2}];function c(e){const s={a:"a",annotation:"annotation",h1:"h1",h2:"h2",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"heapsort",children:"Heapsort"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Heapsort",children:"heapsort"})," is a sorting algorithm using ",(0,t.jsx)(s.a,{href:"/notebook/engineering/data/data-structure/heap/",children:"max-heap"})," data structure. It basically works like this:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Divides the input into a sorted and an unsorted region."}),"\n",(0,t.jsx)(s.li,{children:"Takes the largest element from the unsorted region and inserts it into the sorted region."}),"\n",(0,t.jsx)(s.li,{children:"The unsorted region is kept as a heap, which allows finding the largest element quickly."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Heapsort animated example",src:n(1564).A+"",width:"280",height:"214"})}),"\n",(0,t.jsx)(s.h2,{id:"complexity",children:"Complexity"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"/notebook/engineering/algorithms/complexity",children:"Time complexity"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Worst-case"}),": ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"O"}),(0,t.jsx)(s.mo,{stretchy:"false",children:"("}),(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mi,{children:"log"}),(0,t.jsx)(s.mo,{children:"\u2061"}),(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(n\\log n)"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(s.span,{className:"mopen",children:"("}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsxs)(s.span,{className:"mop",children:["lo",(0,t.jsx)(s.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://www.cs.usfca.edu/~galles/visualization/HeapSort.html",children:"Heapsort visualization"})," \u2013 David Galles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=2DmK_H7IdTo",children:"Heapsort in 4 minutes"})," \u2013 Youtube"]}),"\n"]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1564:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/heapsort-aa9573fe0d26eeaca106488c13633ed9.gif"},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var t=n(6540);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);