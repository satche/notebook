"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[3856],{8323:(e,o,i)=>{i.r(o),i.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>m});var t=i(4848),n=i(8453);const s={aliases:["SAT"],tags:["algorithm"]},a="Boolean Satisfiability Problem",r={id:"engineering/algorithms/problems/boolean-satisfiability",title:"Boolean Satisfiability Problem",description:"In Boolean Satisfiability Problem (SAT), we try to solve a formula composed of boolean expressions. If we find a way so the formula is true, it is satisfiable.",source:"@site/docs/engineering/algorithms/problems/boolean-satisfiability.md",sourceDirName:"engineering/algorithms/problems",slug:"/engineering/algorithms/problems/boolean-satisfiability",permalink:"/notebook/engineering/algorithms/problems/boolean-satisfiability",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/problems/boolean-satisfiability.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:["SAT"],tags:["algorithm"]},sidebar:"engineeringSidebar",previous:{title:"Problems",permalink:"/notebook/engineering/algorithms/problems/"},next:{title:"Constraint Satisfaction Problem",permalink:"/notebook/engineering/algorithms/problems/csp"}},l={},m=[{value:"Cook-Levin theorem",id:"cook-levin-theorem",level:2}];function c(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"boolean-satisfiability-problem",children:"Boolean Satisfiability Problem"}),"\n",(0,t.jsxs)(o.p,{children:["In ",(0,t.jsx)(o.a,{href:"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem",children:"Boolean Satisfiability Problem"})," (SAT), we try to solve a formula composed of boolean expressions. If we find a way so the formula is true, it is ",(0,t.jsx)(o.em,{children:"satisfiable"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["For example, the formula ",(0,t.jsx)(o.code,{children:"(A OR B) AND (A AND NOT B)"})," is satisfiable if ",(0,t.jsx)(o.code,{children:"A"})," is true and ",(0,t.jsx)(o.code,{children:"B"})," is false."]}),"\n",(0,t.jsx)(o.h2,{id:"cook-levin-theorem",children:"Cook-Levin theorem"}),"\n",(0,t.jsxs)(o.p,{children:["The ",(0,t.jsx)(o.a,{href:"https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem",children:"Cook-Levein theorem"})," says that the SAT problem is ",(0,t.jsx)(o.a,{href:"/notebook/engineering/algorithms/complexity#NP",children:"NP-Complete"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["It also says that any NP problem can be reduced to an instance of a SAT problem. It means that if we can solve it in polynomial time, we can solve any NP problem in the same way, and the ",(0,t.jsx)(o.a,{href:"/notebook/engineering/algorithms/problems/p-vs-np",children:"P vs. NP"})," problem would be solved."]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,o,i)=>{i.d(o,{R:()=>a,x:()=>r});var t=i(6540);const n={},s=t.createContext(n);function a(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);