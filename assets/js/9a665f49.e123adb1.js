"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2989],{9505:e=>{e.exports=JSON.parse('{"tag":{"label":"data-structure/graph","permalink":"/notebook/tags/data-structure-graph","allTagsPath":"/notebook/tags","count":10,"items":[{"id":"engineering/algorithms/graph/bellman-ford","title":"Bellman-Ford algorithm","description":"Bellman-Ford algorithm find shortest-path in a [graph]], from one vertex to the other ones. It\'s like [Dijkstra algorithm, but can handle negative weighted edges. It\'s also slower.","permalink":"/notebook/engineering/algorithms/graph/bellman-ford"},{"id":"engineering/algorithms/search/breadth-first-search","title":"Breadth-first search","description":"Breadth-first search (BFS) search inside a graph by first prioritising all the children nodes before moving to the next one.","permalink":"/notebook/engineering/algorithms/search/breadth-first-search"},{"id":"engineering/algorithms/search/depth-first-search","title":"Depth-first search","description":"Depth-first search (DFS) search inside a graph by exploring as far as possible along each branch before backtracking.","permalink":"/notebook/engineering/algorithms/search/depth-first-search"},{"id":"engineering/algorithms/graph/dijkstra","title":"Dijkstra\'s algorithm","description":"Dijkstra\'s algorithm is a greedy algorithm that can be used to find, in a graph, the shortest path from a chosen vertices among all the other vertices.","permalink":"/notebook/engineering/algorithms/graph/dijkstra"},{"id":"engineering/algorithms/graph/floyd-warshall","title":"Floyd-Warshall algorithm","description":"Floyd-Warshall algorithm try to find the shortest path among all the vertices from a graph, with positive or negative weighted edges. It\'s best suited for denses graphs.","permalink":"/notebook/engineering/algorithms/graph/floyd-warshall"},{"id":"engineering/data/data-structure/graph","title":"Graph","description":"A graph) is a set of vertices (points) connected by edges (lines).","permalink":"/notebook/engineering/data/data-structure/graph"},{"id":"engineering/algorithms/graph/kruskal","title":"Kruskal\'s algorithm","description":"Kruskal\'s algorithm is a greedy algorithm that tries to find a Minimum Spanning Tree among a graph. To achieve this, he use a minimal spanning forest first and connect the trees together.","permalink":"/notebook/engineering/algorithms/graph/kruskal"},{"id":"engineering/algorithms/graph/nearest-neighbour","title":"Nearest neighbour","description":"Nearest neighbour is a greedy algorithm initially to find the shortest path among a graph. It is typically used to solve problems like Traveling Salesman.","permalink":"/notebook/engineering/algorithms/graph/nearest-neighbour"},{"id":"engineering/algorithms/graph/prim","title":"Prim\'s algorithm","description":"Prim\'s algorithm is a greedy algorithm used to find the Minimum Spanning Tree in a graph.","permalink":"/notebook/engineering/algorithms/graph/prim"},{"id":"engineering/algorithms/problems/shortest-path","title":"Shortest path problem","description":"The shortest path problem try to find a path in a graph cover the less distance. For that, the weights of the chosen edges should be as small as possible.","permalink":"/notebook/engineering/algorithms/problems/shortest-path"}],"unlisted":false}}')}}]);