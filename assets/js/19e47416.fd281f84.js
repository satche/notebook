"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1042],{4757:e=>{e.exports=JSON.parse('{"tag":{"label":"algorithm","permalink":"/notebook/tags/algorithm","allTagsPath":"/notebook/tags","count":25,"items":[{"id":"engineering/algorithms/search/beam-search","title":"Beam search","description":"Beam search is a heuristic algorithm applied on a tree. It\'s very similar to breadth-first search, but it keeps $p$ best candidates at each $k$ level of the tree.","permalink":"/notebook/engineering/algorithms/search/beam-search"},{"id":"engineering/algorithms/graph/bellman-ford","title":"Bellman-Ford algorithm","description":"Bellman-Ford algorithm find shortest-path in a [graph]], from one vertex to the other ones. It\'s like [Dijkstra algorithm, but can handle negative weighted edges. It\'s also slower.","permalink":"/notebook/engineering/algorithms/graph/bellman-ford"},{"id":"engineering/algorithms/problems/boolean-satisfiability","title":"Boolean Satisfiability Problem","description":"In Boolean Satisfiability Problem (SAT), we try to solve a formula composed of boolean expressions. If we find a way so the formula is true, it is satisfiable.","permalink":"/notebook/engineering/algorithms/problems/boolean-satisfiability"},{"id":"engineering/algorithms/search/breadth-first-search","title":"Breadth-first search","description":"Breadth-first search (BFS) search inside a graph by first prioritising all the children nodes before moving to the next one.","permalink":"/notebook/engineering/algorithms/search/breadth-first-search"},{"id":"engineering/algorithms/problems/csp","title":"Constraint Satisfaction Problem","description":"Constraint Satisfaction Problem (CSP)","permalink":"/notebook/engineering/algorithms/problems/csp"},{"id":"engineering/algorithms/sort/counting","title":"Counting sort","description":"Counting sort is used to sort small range of integers. It basically works like this:","permalink":"/notebook/engineering/algorithms/sort/counting"},{"id":"engineering/algorithms/search/depth-first-search","title":"Depth-first search","description":"Depth-first search (DFS) search inside a graph by exploring as far as possible along each branch before backtracking.","permalink":"/notebook/engineering/algorithms/search/depth-first-search"},{"id":"engineering/algorithms/graph/dijkstra","title":"Dijkstra\'s algorithm","description":"Dijkstra\'s algorithm is a greedy algorithm that can be used to find, in a graph, the shortest path from a chosen vertices among all the other vertices.","permalink":"/notebook/engineering/algorithms/graph/dijkstra"},{"id":"engineering/algorithms/problems/flow","title":"Flow cost problem","description":"We try to find the minimum or maximum flow among a graph.","permalink":"/notebook/engineering/algorithms/problems/flow"},{"id":"engineering/algorithms/graph/floyd-warshall","title":"Floyd-Warshall algorithm","description":"Floyd-Warshall algorithm try to find the shortest path among all the vertices from a graph, with positive or negative weighted edges. It\'s best suited for denses graphs.","permalink":"/notebook/engineering/algorithms/graph/floyd-warshall"},{"id":"engineering/algorithms/graph/ford-fulkerson","title":"Ford-Fulkerson algorithm","description":"Ford-Fulkerson algorithm is a greedy algorithm to find a maximum flow among a graph.","permalink":"/notebook/engineering/algorithms/graph/ford-fulkerson"},{"id":"engineering/algorithms/genetic/genetic","title":"Genetic algorithms","description":"Genetic algorithms imitate biological processes like natural selection, mutation, inheritance, etc.","permalink":"/notebook/engineering/algorithms/genetic/"},{"id":"engineering/algorithms/problems/graph-coloring","title":"Graph coloring problem","description":"Graph coloring problems include the coloring (or labeling) of vertices in a graph.","permalink":"/notebook/engineering/algorithms/problems/graph-coloring"},{"id":"engineering/algorithms/sort/heapsort","title":"Heapsort","description":"The heapsort is a sorting algorithm using max-heap data structure. It basically works like this:","permalink":"/notebook/engineering/algorithms/sort/heapsort"},{"id":"engineering/algorithms/problems/knapsack","title":"Knapsack problem","description":"The knapsack problem is a combinatorial optimization problem, used in resource allocation. It can concern for example: minimal waste in material cutting, selection of investements, cryoptgraphy, etc.","permalink":"/notebook/engineering/algorithms/problems/knapsack"},{"id":"engineering/algorithms/graph/kruskal","title":"Kruskal\'s algorithm","description":"Kruskal\'s algorithm is a greedy algorithm that tries to find a Minimum Spanning Tree among a graph. To achieve this, he use a minimal spanning forest first and connect the trees together.","permalink":"/notebook/engineering/algorithms/graph/kruskal"},{"id":"engineering/algorithms/graph/nearest-neighbour","title":"Nearest neighbour","description":"Nearest neighbour is a greedy algorithm initially to find the shortest path among a graph. It is typically used to solve problems like Traveling Salesman.","permalink":"/notebook/engineering/algorithms/graph/nearest-neighbour"},{"id":"engineering/algorithms/problems/p-vs-np","title":"P vs. NP problem","description":"The P vs. NP problem asks is it\'s possible to finding a solution to a problem as quickly it is to verify it. P and NP refers to the complexity classes of these problems.","permalink":"/notebook/engineering/algorithms/problems/p-vs-np"},{"id":"engineering/algorithms/graph/prim","title":"Prim\'s algorithm","description":"Prim\'s algorithm is a greedy algorithm used to find the Minimum Spanning Tree in a graph.","permalink":"/notebook/engineering/algorithms/graph/prim"},{"id":"engineering/algorithms/problems/shortest-path","title":"Shortest path problem","description":"The shortest path problem try to find a path in a graph cover the less distance. For that, the weights of the chosen edges should be as small as possible.","permalink":"/notebook/engineering/algorithms/problems/shortest-path"},{"id":"engineering/algorithms/genetic/simulated-annealing","title":"Simulated annealing","description":"Simulated annealing aims to find the global minimum/maximum value by occasionally accepting solutions that are worse than the previous one. This approach helps to avoid getting stuck in a local minimum/maximum solution.","permalink":"/notebook/engineering/algorithms/genetic/simulated-annealing"},{"id":"engineering/algorithms/problems/steiner-tree","title":"Steiner tree problem","description":"Steiner tree problem can be see to the mix between a Minimum Spanning Tree problem and a shortest path problem. It tries to find the shortest network between the vertices of a graph.","permalink":"/notebook/engineering/algorithms/problems/steiner-tree"},{"id":"engineering/algorithms/search/tabu-search","title":"Tabu search","description":"Tabu search is a metaheuristic to avoid getting stuck in local optimum during a neighborhood search.","permalink":"/notebook/engineering/algorithms/search/tabu-search"},{"id":"engineering/algorithms/problems/traveling-salesman","title":"Traveling Salesman Problen","description":"The Traveling Salesman Problem (TSP) needs to find the shortest possible route for a salesman to visit each city exactly one time and returns to the starting point.","permalink":"/notebook/engineering/algorithms/problems/traveling-salesman"},{"id":"engineering/algorithms/search/two-pointers","title":"Two-pointers","description":"Two-pointers is used to search pairs in an array.","permalink":"/notebook/engineering/algorithms/search/two-pointers"}],"unlisted":false}}')}}]);