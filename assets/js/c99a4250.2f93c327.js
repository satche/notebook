"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[9800],{2970:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=i(4848),r=i(8453);const s={aliases:["BASE"],tags:[]},a="ACID",o={id:"engineering/architecture/principles/acid",title:"ACID",description:"ACID properties are principles applicable in rdbms",source:"@site/docs/engineering/architecture/principles/acid.md",sourceDirName:"engineering/architecture/principles",slug:"/engineering/architecture/principles/acid",permalink:"/notebook/engineering/architecture/principles/acid",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/architecture/principles/acid.md",tags:[],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:["BASE"],tags:[]},sidebar:"engineeringSidebar",previous:{title:"Pipe and filter",permalink:"/notebook/engineering/architecture/patterns/pipe-and-filter"},next:{title:"readme",permalink:"/notebook/engineering/architecture/principles/assets/"}},c={},l=[{value:"BASE",id:"base",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"acid",children:"ACID"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://wikipedia.org/wiki/acid",children:"ACID properties"})," are principles applicable in ",(0,t.jsx)(n.a,{href:"/notebook/engineering/data/database/rdbms",children:"rdbms"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"A"}),"tomicity: ensures that the transaction is done in its entirety: if one part cannot be executed, the data is restored and nothing happens."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"C"}),"onsistency: manages the validation of data within the transaction, such as integrity constraints or typing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"I"}),"solation: forces autonomy within transactions; they are not dependent on each other, even if their execution is simultaneous."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"D"}),"urability: provides for the storage of confirmed transactions in order to keep them even in the event of unforeseen circumstances (e.g. server failure)."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"base",children:"BASE"}),"\n",(0,t.jsxs)(n.p,{children:["Since ACID properties can't be guarantee in ",(0,t.jsx)(n.a,{href:"/notebook/engineering/data/database/nosql/",children:"NoSQL"})," databases, they have their own ",(0,t.jsx)(n.a,{href:"https://wikipedia.org/wiki/backronym",children:"backronym"})," : the ",(0,t.jsx)(n.a,{href:"https://wikipedia.org/wiki/eventual_consistency",children:"BASE properties"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"B"}),"asically ",(0,t.jsx)(n.strong,{children:"A"}),"available: guarantees availability of the data despite the workload by spreading and replicating across the node of the cluster."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"S"}),"oft-state: database can change during updates or when adding/removing servers; it does not have to guarantee consistency at all times."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"E"}),"ventually consistent: in the long run, the database will reach a consistent state."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://phoenixnap.com/kb/acid-vs-base",children:"ACID vs. BASE: Comparison of Database Transaction Models"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);