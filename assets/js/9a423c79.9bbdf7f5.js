"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[6241],{8098:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>m});var i=t(4848),r=t(8453);const o={aliases:["TSP"],tags:["algorithm","algorithm/problem"]},s="Traveling Salesman Problen",a={id:"engineering/algorithms/problems/traveling-salesman",title:"Traveling Salesman Problen",description:"The Traveling Salesman Problem (TSP) needs to find the shortest possible route for a salesman to visit each city exactly one time and returns to the starting point.",source:"@site/docs/engineering/algorithms/problems/traveling-salesman.md",sourceDirName:"engineering/algorithms/problems",slug:"/engineering/algorithms/problems/traveling-salesman",permalink:"/notebook/engineering/algorithms/problems/traveling-salesman",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/problems/traveling-salesman.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"algorithm/problem",permalink:"/notebook/tags/algorithm-problem"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:["TSP"],tags:["algorithm","algorithm/problem"]},sidebar:"engineeringSidebar",previous:{title:"Steiner tree problem",permalink:"/notebook/engineering/algorithms/problems/steiner-tree"},next:{title:"Beam search",permalink:"/notebook/engineering/algorithms/search/beam-search"}},l={},m=[{value:"Complexity",id:"complexity",level:2},{value:"Improvement",id:"improvement",level:2}];function h(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"traveling-salesman-problen",children:"Traveling Salesman Problen"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://wikipedia.org/wiki/travelling_salesman_problem",children:"Traveling Salesman Problem"})," (TSP) needs to find the shortest possible route for a salesman to visit each city exactly one time and returns to the starting point."]}),"\n",(0,i.jsxs)(n.p,{children:["It is easily transposable as a ",(0,i.jsx)(n.a,{href:"/notebook/engineering/data/data-structure/graph",children:"graph"}),", where cities are vertices and routes are edges, representing a ",(0,i.jsx)(n.a,{href:"/notebook/engineering/data/data-structure/graph#Eulerian%20vs.%20Hamiltonian",children:"hamiltonian path"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(n.p,{children:["The TSP is categorised as ",(0,i.jsx)(n.a,{href:"/notebook/engineering/algorithms/complexity#NP",children:"NP-Complete"}),": there is currently no algorithm to solve it in polynomial time."]}),"\n",(0,i.jsx)(n.h2,{id:"improvement",children:"Improvement"}),"\n",(0,i.jsxs)(n.p,{children:["Some ",(0,i.jsx)(n.a,{href:"/notebook/engineering/algorithms/#Terminology",children:"heuristics"})," exist to improve found solutions."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/2-opt",children:"2-opt"}),": take 2 random edges, swap them and verify if it improves the solution. It's possible to swap more edges (3-opt, 4-opt, etc)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Lin%E2%80%93Kernighan_heuristic",children:"Lin-Kernighan"}),": create a split in the graph and count the number of edges that cross it. Swap 2 edges: if less vertices cross the split, the solution has improved.",(0,i.jsx)("br",{}),"(Example: ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=6cPql7A6JHU",children:"profmadden's video"}),")"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);