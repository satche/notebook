"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8075],{3848:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var r=n(4848),o=n(8453);const i={tags:["algorithm","algorithm/problem"]},s="Steiner tree problem",a={id:"engineering/algorithms/problems/steiner-tree",title:"Steiner tree problem",description:"Steiner tree problem can be see to the mix between a Minimum Spanning Tree problem and a shortest path problem. It tries to find the shortest network between the vertices of a graph.",source:"@site/docs/engineering/algorithms/problems/steiner-tree.md",sourceDirName:"engineering/algorithms/problems",slug:"/engineering/algorithms/problems/steiner-tree",permalink:"/notebook/engineering/algorithms/problems/steiner-tree",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/algorithms/problems/steiner-tree.md",tags:[{inline:!0,label:"algorithm",permalink:"/notebook/tags/algorithm"},{inline:!0,label:"algorithm/problem",permalink:"/notebook/tags/algorithm-problem"}],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{tags:["algorithm","algorithm/problem"]},sidebar:"engineeringSidebar",previous:{title:"Shortest path problem",permalink:"/notebook/engineering/algorithms/problems/shortest-path"},next:{title:"Traveling Salesman Problen",permalink:"/notebook/engineering/algorithms/problems/traveling-salesman"}},l={},h=[];function m(e){const t={a:"a",em:"em",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"steiner-tree-problem",children:"Steiner tree problem"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Steiner_tree_problem",children:"Steiner tree problem"})," can be see to the mix between a ",(0,r.jsx)(t.a,{href:"/notebook/engineering/data/data-structure/tree#Minimum%20Spanning%20Tree",children:"Minimum Spanning Tree"})," problem and a ",(0,r.jsx)(t.a,{href:"/notebook/engineering/algorithms/problems/shortest-path",children:"shortest path"})," problem. It tries to find the shortest network between the vertices of a ",(0,r.jsx)(t.a,{href:"/notebook/engineering/data/database/nosql/graph",children:"graph"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The problem can be illustrated by building the less roads possible to connect cities together."}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes, we can add the option to add vertices (i.e. ",(0,r.jsx)(t.em,{children:"Steiner nodes"}),") to the graph to decrease the total length of the graph."]}),"\n",(0,r.jsxs)(t.p,{children:["It is considered as a ",(0,r.jsx)(t.a,{href:"/notebook/engineering/algorithms/complexity#NP",children:"NP-hard"})," problem."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);