"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2994],{4989:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=i(4848),r=i(8453);const s={aliases:[],tags:[]},a="Load balancing",o={id:"engineering/infrastructure/cloud/load-balancing",title:"Load balancing",description:"Load balancing) is the principle of efficiently distributing tasks over resources to avoid overload.",source:"@site/docs/engineering/infrastructure/cloud/load-balancing.md",sourceDirName:"engineering/infrastructure/cloud",slug:"/engineering/infrastructure/cloud/load-balancing",permalink:"/notebook/engineering/infrastructure/cloud/load-balancing",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/infrastructure/cloud/load-balancing.md",tags:[],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:[],tags:[]},sidebar:"engineeringSidebar",previous:{title:"IoT",permalink:"/notebook/engineering/infrastructure/cloud/iot"},next:{title:"Virtualization",permalink:"/notebook/engineering/infrastructure/cloud/virtualization"}},l={},c=[{value:"Circuit breaker",id:"circuit-breaker",level:2},{value:"Scheduling",id:"scheduling",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"load-balancing",children:"Load balancing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://wikipedia.org/wiki/load_balancing_(computing)",children:"Load balancing"})," is the principle of efficiently distributing tasks over resources to avoid overload."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Dedicated / central Load balancer"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Runs in separate process"}),"\n",(0,t.jsx)(n.li,{children:"Shared by clients, for multiple services"}),"\n",(0,t.jsx)(n.li,{children:"Possible bottlenecks"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Client-side Load balancer"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implemented/used as a library"}),"\n",(0,t.jsx)(n.li,{children:"Client decide which service instant to connect"}),"\n",(0,t.jsx)(n.li,{children:"Require registry to have an overview"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"circuit-breaker",children:"Circuit breaker"}),"\n",(0,t.jsx)(n.p,{children:"The circuit breaker avoid requests overload of a service by cutting requests before it\u2019s to late. The application won\u2019t waste resources (RAM, CPU) on requests that will never return anyway"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"State"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Closed: count the number of failed requests. Passed a certain threshold, state pass to open and rester after a certain amount of time"}),"\n",(0,t.jsx)(n.li,{children:"Open: requests are blocked. The state pass to half-open after some time or by sending request to himself as health check"}),"\n",(0,t.jsx)(n.li,{children:"Half-open: only some request pass. Switch to one or other state depending of amount of succeeded/failed requests"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"scheduling",children:"Scheduling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://wikipedia.org/wiki/round-robin_scheduling",children:"Round-robin"}),": circular scheduling"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);