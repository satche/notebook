"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8823],{5809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(4848),r=t(8453);const s={aliases:["Model-View-Controller","HMVC","MVA","MVP","MVVM"],tags:[]},o="MVC",l={id:"engineering/architecture/patterns/mvc",title:"MVC",description:"Model-View-Controller is a design pattern to develop user interface in three interconnected components.",source:"@site/docs/engineering/architecture/patterns/mvc.md",sourceDirName:"engineering/architecture/patterns",slug:"/engineering/architecture/patterns/mvc",permalink:"/notebook/engineering/architecture/patterns/mvc",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/architecture/patterns/mvc.md",tags:[],version:"current",lastUpdatedAt:1721721519e3,frontMatter:{aliases:["Model-View-Controller","HMVC","MVA","MVP","MVVM"],tags:[]},sidebar:"engineeringSidebar",previous:{title:"Microservices",permalink:"/notebook/engineering/architecture/patterns/microservices"},next:{title:"Observer",permalink:"/notebook/engineering/architecture/patterns/observer"}},a={},d=[{value:"Component",id:"component",level:2},{value:"Model",id:"model",level:3},{value:"View",id:"view",level:3},{value:"Controller",id:"controller",level:3},{value:"Variants and alternatives",id:"variants-and-alternatives",level:2},{value:"MVP",id:"mvp",level:3},{value:"MVVM",id:"mvvm",level:3}];function c(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"mvc",children:"MVC"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://wikipedia.org/wiki/model%e2%80%93view%e2%80%93controller",children:"Model-View-Controller"})," is a design pattern to develop user interface in three interconnected components."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/mvc-process.svg/400px-mvc-process.svg.png",alt:"MVC representation"}),"\nKeep in mind that MVC is ",(0,i.jsx)(n.em,{children:"not"})," a ",(0,i.jsx)(n.a,{href:"/notebook/engineering/architecture/styles/layered",children:"layered architecture"})," (where each layer can communicate only with the one above or under)."]}),"\n",(0,i.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,i.jsx)(n.h3,{id:"model",children:"Model"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Describe data ",(0,i.jsx)(n.strong,{children:"state"}),", structure and behaviour"]}),"\n",(0,i.jsx)(n.li,{children:"Handle data access and modification"}),"\n",(0,i.jsx)(n.li,{children:"Independent from the View and Controller"}),"\n",(0,i.jsxs)(n.li,{children:["Notify the View of changes (",(0,i.jsx)(n.a,{href:"/notebook/engineering/architecture/patterns/observer",children:"observer"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"view",children:"View"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Presentation layer: ",(0,i.jsx)(n.strong,{children:"display"})," the data to the end-user"]}),"\n",(0,i.jsx)(n.li,{children:"Requests update from the Model"}),"\n",(0,i.jsx)(n.li,{children:"Send user's actions to the Controller"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"controller",children:"Controller"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Connects end-users to the ",(0,i.jsx)(n.strong,{children:"application"})]}),"\n",(0,i.jsx)(n.li,{children:"Handle inputs and requests, converts it to commands"}),"\n",(0,i.jsx)(n.li,{children:"Update the Model according to user's actions"}),"\n",(0,i.jsx)(n.li,{children:"Chose the View to respond with"}),"\n",(0,i.jsx)(n.li,{children:"Can handle several Views."}),"\n",(0,i.jsx)(n.li,{children:"Dependent of View and Model"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"variants-and-alternatives",children:"Variants and alternatives"}),"\n",(0,i.jsx)(n.h3,{id:"mvp",children:"MVP"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"https://wikipedia.org/wiki/model%e2%80%93view%e2%80%93presenter",children:"Model-View-Presenter"}),", a Presenter is the bridge between the View and the Model."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Presenter can handle only one View (in contrast with a Controller)"}),"\n",(0,i.jsx)(n.li,{children:"Presenter listen to both View and Model"}),"\n",(0,i.jsx)(n.li,{children:"Views must implement an interface to interact with its Presenter"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/d/dc/model_view_presenter_gui_design_pattern.png",alt:"MVP representation"})}),"\n",(0,i.jsx)(n.h3,{id:"mvvm",children:"MVVM"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"https://wikipedia.org/wiki/model%e2%80%93view%e2%80%93viewmodel",children:"Model-View-ViewModel"}),", a ViewModel bind data between View and Model, instead of using an event-listener system. It is easier to implement and test, but it can lead to code complexity and can be memory-costy."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/8/87/mvvmpattern.png",alt:"MVVM schema"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);