"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8631],{7389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(4848),i=n(8453);const r={aliases:["Primitives"],tags:["data","data/types"]},s="Data types",o={id:"engineering/data/types/types",title:"Data types",description:"We use different kind of data, with different properties (e.g. range of values), to achieve different tasks. For example, adding dates or numbers work differently. That's why we use data types.",source:"@site/docs/engineering/data/types/types.md",sourceDirName:"engineering/data/types",slug:"/engineering/data/types/",permalink:"/notebook/engineering/data/types/",draft:!1,unlisted:!1,editUrl:"https://github.com/satche/notebook/tree/main/docs/engineering/data/types/types.md",tags:[{inline:!0,label:"data",permalink:"/notebook/tags/data"},{inline:!0,label:"data/types",permalink:"/notebook/tags/data-types"}],version:"current",lastUpdatedAt:1721721624e3,frontMatter:{aliases:["Primitives"],tags:["data","data/types"]},sidebar:"engineeringSidebar",previous:{title:"Garbage In, Garbage Out",permalink:"/notebook/engineering/data/glossary/gigo"},next:{title:"Date types",permalink:"/notebook/engineering/data/types/date"}},d={},l=[{value:"Primitives",id:"primitives",level:2}];function p(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"data-types",children:"Data types"})}),"\n",(0,a.jsxs)(t.p,{children:["We use different kind of data, with different properties (e.g. range of values), to achieve different tasks. For example, adding dates or numbers work differently. That's why we use ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Data_type",children:"data types"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"primitives",children:"Primitives"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Primitive_data_type",children:"Primitive data types"})," are the basic ones, necessary to built other complex data types. We also refer to them as ",(0,a.jsx)(t.em,{children:"built-in types"}),", since they're built into the programming language."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/notebook/engineering/data/types/numeric",children:"Numeric types"})," - Integers and float"]}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Boolean_data_type",children:"Boolean types"})}),"\n",(0,a.jsx)(t.li,{children:"Textual types - Characters and Strings"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Keep in mind that primitives are ",(0,a.jsx)(t.a,{href:"/notebook/code/glossary/immutable",children:"immutable"}),": you can't change their value. When you declare a variable to a primitive and change it after, you're actually changing the address (reference), not the value itself.(See:\xa0",(0,a.jsx)(t.a,{href:"/notebook/engineering/architecture/paradigms/object-oriented#Object%20copying",children:"Object copying"}),")."]}),"\n",(0,a.jsx)(t.p,{children:"Primitive values are still freed from memory, thanks to garbage collection"})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);